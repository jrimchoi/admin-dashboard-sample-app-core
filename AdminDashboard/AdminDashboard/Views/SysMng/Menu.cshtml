@using DSELN.Models.Sample
@using DSELN.Cmm.Utils
@using Newtonsoft.Json;
@*@model IEnumerable<Student>*@

@{
	//ViewData["Title"] = "Code Group ";
	//ViewBag["CodeType"] = codeType;
}
@*<h1>@ViewData["Title"] </h1>*@

<!-- **********************************************************************  -->
<!-- *****************************  html body *****************************  -->
<!-- **********************************************************************  -->
 
      <!-- 내용 -->
      <!-- Content Wrapper. Contains page content -->
      <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <section class="content-header"> 
  
	        <div id="pageHeadDiv">
	        	<table>
	        	<tbody>
	        	<tr>
	        	<td class="page-title">
	        		<h2 id="ph">메뉴등록</h2>
	        		<h3 id="sph"></h3>
	        	</td>
	        	<td class="functions">
	        	</td>
	        	</tr>
	        	</tbody></table>
	        </div>
        </section>
        
        <!-- Main content -->
        <section class="content">
         
         <div class="row">
           <!-- 내용 -->
           <div class="col-xs-12">
            
		              <!-- table 하나 -->
		              <div id="box" class="box">
 
			                <div id="parent" class="box-body">
                                    
                                <form  id="formCond" name="formCond" method="post">
									<div id="condition" class="condition" > 
                                            
											<table border="0" summary="조회조건" width="100%">
												<col style="width:10%" />
												<col style="width:20%" />
												
												<col style="right:0" />
												
												<tbody>
													<tr>  <!-- 1행  -->
				 										<td><label for="LANG_CD_Q" >언어</label></td>
				 										<td><input id="LANG_CD_Q" name="LANG_CD"  _data-input-type="combobox" _data-code-ds="LANG_CD"  /></td>
				 										<td class="buttons">
															<button id="btnSearch" type="button" class="search">조회</button>
                                                            @*<button id="btnAdd"  type="button" class="add">추가</button>*@
				 										</td>
													</tr>
												</tbody>
											</table>
									</div> 
                             </form>

			    			</div>
		    			
		    		</div><!-- box -->
		         
 
		       </div><!-- col-xs-12 -->
		     </div><!-- row -->
		     
	         <div class="row">
	           <!-- 내용 -->
	           <div class="col-xs-12">
	            
			              <!-- table 하나 -->
			              <div id="box" class="box">
	 
				                <div id="parent" class="box-body">
                                    <div id="splitter1"  > <!-- splitter !!!! -->
										    <div id="treeMenu"></div>
                                    </div>
				    			</div>
			    			
			    		</div><!-- box -->
			         
 
		       </div><!-- col-xs-12 -->
		     </div><!-- row -->
		     
        </section>    
        
      </div>


<!-- ************************************************************************************************ -->
<!-- ********************************      start of javascript       ****************************************** -->
<!-- ************************************************************************************************ -->
<script>

    /***********************************************************************
    // document ready 
    ***********************************************************************/
    // 0000. 전역변수 
    var _dsCodeList = null;          // 공통코드 dataSource
    var _vmCond = null;              // 조회조건 view model (kendo.observable)
    var _dsMenu = null;               // 메뉴 dataSource 
    var dsMenu_destroy = []; 

    // document ready 
    $(document).ready(function () {
        // 1010. form 초기화 
        fnSetForm(); 

        // 2010. grid & dataSource 초기화 
        fnSetGrid(); 

        // 3010. view & search 
        TR.search("Q");
    });

    // from 초기화 
    function fnSetForm(svid){
         // 1010. 코드 담기 : Controller ==> ViewBag.CodeList ==>  _dsCodeList  ==> select, radio 등 개별 datasource 에 적용 
        KendoUtils.setCodeList('@Html.Raw(Json.Serialize(ViewBag.CodeList))');  
        
        // 2010. 기본 컴포넌트 생성 (input --> kendo component ) / form tag & name attr required 
        _vmCond = KendoUtils.setInputKendo("formCond", "_vmCond"); 

        // 3010. 초기값 
        //KendoUtils.set("LANG_CD_Q", "KO");
    }

    // grid & dataSource 초기화 
    function fnSetGrid(){
        // 1010. grid 
        // 10. 메뉴 
        _dsMenu = new kendo.data.TreeListDataSource({
                 //data: [],
                 schema: {
                     model: {
                         id: "MENU_CD",
                         parentId: "UP_MENU_CD",   
                         fields: {
                	         MENU_CD: { field: "MENU_CD", type: "string", editable:true , validation:{ required: true, max: 40}},
                	         UP_MENU_CD: { field: "UP_MENU_CD", "defaultValue": "ROOT" , editable:true},
                	         MENU_NM: { field: "MENU_NM", type: "string" , editable:true},
                	 
                	         SYS_ID: { field: "SYS_ID", type: "string" , editable:true},
                	         REM: { field: "REM", type: "string" , editable:true},
                	         STS: { field: "STS", type: "string" , editable:true},
                	         LINK_URL: { field: "LINK_URL", type: "string" , editable:true},
                	         SORT_ORD: { field: "SORT_ORD", type: "number" , editable:true},
                	 
                	         MENU_TYP: { field: "MENU_TYP", type: "string" , editable:true},
                	         USE_YN: { field: "USE_YN", type: "string" , editable:true},
                	         USR_CLS: { field: "USR_CLS", type: "string" , editable:true},
                	         LINK_URL: { field: "LINK_URL", type: "string" , editable:true},
                	         MD_CLS: { field: "MD_CLS", type: "string" , editable:true},
                	         DISPLAY_YN: { field: "DISPLAY_YN", type: "string" , editable:true},
                	         MENU_NM_EN: { field: "MENU_NM_EN", type: "string" , editable:true},
                	         MENU_NM_KO: { field: "MENU_NM_KO", type: "string" , editable:true, validation:{ required: true, max: 100}},
                	         MENU_NM_ZH: { field: "MENU_NM_ZH", type: "string" , editable:true},
                	         MENU_CD_KEY: { field: "MENU_CD_KEY", type: "string" , editable:true},
                	         ROLE_CD: { field: "ROLE_CD", type: "string" , editable:true},
                         },
                         expanded: true
                     }
                 }
        });


        $("#treeMenu").kendoTreeList({
            dataSource: _dsMenu,
            height: "100%",
            toolbar: [
					{name: "추가", className: "k-grid-custom-add"},
					{name: "조회", className: "k-grid-custom-search"},
					{name: "저장", className: "k-grid-custom-save"},
			        { name: "cancel", text: "취소" },
            ],
            columns: [
                {    
                    field:"MENU_NM_KO", 
                    title:"메뉴코드 한글명", 
                    headerAttributes: {class:"text-danger",}, 
                    attributes:{style: "text-align: left;", }, 
                    width:"120px", 
                },  
                {    
                    field:"MENU_CD", 
                    title:"메뉴코드", 
                    headerAttributes: {class:"text-danger",}, 
                    attributes:{style: "text-align: left;"}, 
                    width:"100px", 
                },   
                {    
                    field:"UP_MENU_CD", 
                    title:"상위메뉴코드", 
                    editor: KendoUtils.nonEditor, 
                    attributes:{style: "text-align: left;"}, 
                    width:"100px", 
                }, 
                {    
                    field:"LINK_URL", 
                    title:"링크URL", 
                    attributes:{style: "text-align: left;"}, 
                    width:"200px", 
                },    
                {    
                    field:"SORT_ORD", 
                    title:"정렬순서", 
                    attributes:{style: "text-align: center;"}, 
                    format: "{0:n0}",  
                    editor: KendoUtils.numericTextBox, 
                    width:"80px", 
                },   
                {    
                    field:"REM", 
                    title:"비고", 
                    attributes:{style: "text-align: left;"}, 
                    width:"120px", 
                },    
                {    
                    field:"USE_YN",  
                    title:"사용", 
                    attributes:{style: "text-align: center;"}, 
					//editor: KendoUtils.nonCheckEditor, 
					template: KendoUtils.checkTemplate("USE_YN"),
                    width:"40px"
                },   
                {    
                    field:"DISPLAY_YN", 
                    title:"표시", 
                    attributes:{style: "text-align: center;"}, 
					//editor: KendoUtils.nonCheckEditor, 
					template: KendoUtils.checkTemplate("DISPLAY_YN"),
                    width:"40px"
                }, 
                {    
                    field:"MENU_NM_EN", 
                    title:"메뉴코드 영문명", 
                    attributes:{style: "text-align: left;"}, 
                    width:"120px", 
                },     
                {    
                    field:"MENU_NM_ZH", 
                    title:"메뉴코드 중문명", 
                    attributes:{style: "text-align: left;"}, 
                    width:"120px", 
                }, 
                {
                    field:"ROLE_CD", 
                    title:"권한", 
                    width:"140px", 
                    attributes: {style: "text-align: center;"}, 
                    editor:KendoUtils.multiSelectorEditor, 
                    template: KendoUtils.multiTemplate("ROLE_CD", "_dsCodeList['ROLE_CD']"),
                    _editortemplate: {type:"dropDownList", datasourceStr: "_dsCodeList['ROLE_CD']",  },  // 공통 스크립트를 타지는 않지만... 공통의 멀티셀렉터 기능을 가져오기 위해 설정함.  editor 에서 필요함. 
                },    

                //{ command: ["edit", "destroy"], title: " ", width: "200px" },
                //{ command: [{name: "저장", className: "k-grid-custom-row-save"}, {name: "삭제", className: "k-grid-custom-row-delete"},], width: 240 },
                { command: [{name: "삭제", className: "k-grid-custom-row-delete"},], width: 120 },
            ],
 
            remove: function(e) {
                // fnGetDelRows 으로 대체 
            },
     
            //sortable: true,
            selectable: "multiple row", //selectable: "multiple cell","multiple row","cell","row",
            scrollable: true,
            mobile: true,
            resizable: true,  
            reorderable: true,  
            ////editable: true,
	        editable: "incell",
            navigatable: true,
            change: function(e) {// 그리드 셀 선택시 

            },
            save: function(e) {//셀 포커스 아웃...
 
            },
            saveChanges: function(e) {//저장버턴 클릭시 이벤트

            },
            edit: function(e) {//Fired when the user edits or creates a data item
                var inputId = e.container.find("input").attr("name");
                var rowIdx = KendoUtils.getRowIndexByUID("treeMenu", e.model.uid); 
                
                //trace("edit :  " + e.container.find("input").attr("name") + " / " + rowIdx);

                if (rowIdx == 0) {  // 체크박스일 경우에도 cloesCell 처리한다. tab 이동시 해당함. 
                    this.closeCell(); // prevent editing   template checkbox 는 안됨. 따로 처리해야됨. 
                    fnSetRow(rowIdx);
                }else if (inputId == "USE_YN" || inputId == "DISPLAY_YN") {  // 체크박스일 경우에도 cloesCell 처리한다. tab 이동시 해당함. 
                    this.closeCell(); // prevent editing   template checkbox 는 안됨. 따로 처리해야됨. 
                    //fnSetDiableRow(rowIdx);
                }
            },
            dataBound: function(e) {
			
            },
        });

        // 2010. Grid  columns --> datasource schema fields  
        //////_dsCodeGroup = KendoUtils.setGrid2DataSource("grid", "GRP_CD", _dsCodeGroup);  // grid id, key id, datasource object
 
        // 3010. Kendo Grid event ... etc  
        /////KendoUtils.gridComplete();
        fnSetButtonIcon();

        // 4010. resize
        fnResize();
    }

    // button icon 
    function fnSetButtonIcon(){
        $(".k-grid-custom-add").find("span").before('<span class="k-icon k-button-icon k-icon k-i-add"></span>');
        $(".k-grid-custom-search").find("span").before('<span class="k-icon k-button-icon k-icon k-i-search"></span>');
        $(".k-grid-custom-save").find("span").before('<span class="k-icon k-button-icon k-icon k-i-save"></span>');
    };
  
    /***********************************************************************
    // event 처리 
    ***********************************************************************/
    // search clicked 
    $("#btnSearch").click(function() {   
        TR.search("Q"); 
    });

 
    // Trans  
    var TR = {
        // search  
        search : function(svid, pageindex){
            var params = {
                url           : "/SysMng/GetMenuList", 
                data         : "formCond",        // form or {CD_TYP: "C" },  json
                resultBind : {result0: "treeMenu"},   // result0, result1 ... 
                pageindex : isnull(pageindex, 1),
                funcVar  : this, 
                svid        : "Q", 
            };
            KendoAjaxTran.search(params); 
        },

        // save   
        save : function (){ // one-grid ==> List<Model> model 
            var data = fnPreProcess("SAVE");
            if(data.length == 0) return; 

            var params = {
                url           : "/SysMng/SaveMenuList", 
                data         : {model: data},   //  [ trData ]
                resultBind : {result0: "treeMenu"},  // result0, result1 ... 
                funcVar    : this, 
                svid         : "SAVE", 
                msg         : "저장", 
            };
            KendoAjaxTran.save(params); 
        },

        // del   
        del : function (thatTR){ // one-grid ==> List<Model> model 
            var delRows = fnGetDelRows(thatTR);
            if(delRows.length == 0) return; 

            var params = {
                url           : "/SysMng/DeleteMenuList", 
                data         : {model: delRows},   // model --> Controller param name
                resultBind : {result0: "treeMenu"},  // result0, result1 ... 
                funcVar    : this, 
                svid         : "DELETE", 
                msg         : false,  //  fnGetDelRows 에서 메세지 처리를 함.
            };
            KendoAjaxTran.save(params);   // save 로 삭제하겠다. 
        },

        // tranaction post 
        apply_post : function (svid, data){
            if(svid == "SAVE" || svid == "DELETE"){
                this.search("R"); // Search immediately after saving: if necessary
            }else if(svid == "Q"){
                // 첫행 checkbox disable  
                fnSetRow(0);
            }
        },
    }; 

    // row checkbox disable 
    function fnSetRow(rowIdx){
        $("#treeMenu tbody tr").each(function(index, item){ 
            if(rowIdx == index){
                $(item).find("td [type='checkbox']").each(function(index2, item2){       
                    $(item2).attr("disabled", true);
                });
                $(item).find("td [type='button']").each(function(index2, item2){       
                    $(item2).attr("disabled", true);
                });
            }

            $(item).find(".k-grid-custom-row-delete").find("span").each(function(index2, item2){       
                if($(item).find(".k-grid-custom-row-delete").find(".k-i-delete").length == 0){
                    $(item2).before('<span class="k-icon k-button-icon k-icon k-i-delete"></span>');
                }
            });

        }); 
    };
 
    // treelist command button event
    $("#treeMenu").bind("mousedown", function (e) {  // (주의) click event 아님.... click 시 button toggle 되어버림.
        var grid = $("#treeMenu").data("kendoTreeList");
        var tag = isnull($(e.target)[0].tagName, "").toUpperCase();
        //var uid = $(e.target).closest("tr").attr("data-uid");

        trace("tag : " + tag);

        var dataCommand = "";
        var isTrButton = false; 
        if (tag == "BUTTON" && $(e.target).closest("tr").attr("role") == "row") { // button mousedown 
            dataCommand = $(e.target).attr("class");
            isTrButton = true;
        } else if (tag == "SPAN" && $(e.target).closest("tr").attr("role") == "row") {  // row command 
            var classNm = $(e.target).attr("class");
            if (classNm.indexOf("k-button-text") >= 0) { // button span mousedown : k-button-text   
                dataCommand = $(e.target).closest("button").attr("class");
            }
            isTrButton = true; 
        } else if (tag == "BUTTON" && isnull($(e.target).closest("div").attr("class"), "").indexOf("k-toolbar") >= 0) { // toolbar 
            dataCommand = $(e.target).attr("class");
        } else if (tag == "SPAN" && isnull($(e.target).closest("div").attr("class"), "").indexOf("k-toolbar") >= 0) { // toolbar 
            var classNm = $(e.target).attr("class");
            if (classNm.indexOf("k-button-text") >= 0) { // button span mousedown : k-button-text   
                dataCommand = $(e.target).closest("button").attr("class");
            }
        }

        if (dataCommand != "") {
            trace("dataCommand : " + dataCommand)

            if(isTrButton){
                var tr = $(e.target).closest("tr");
                var trData = grid.dataItem(tr);

                if (dataCommand.indexOf("delete") >= 0) {  // delete or remove
                    TR.del(tr);  // tr 
                } else if (dataCommand.indexOf("save") >= 0) { // save 
                    TR.save();  
                } else if (dataCommand.indexOf("edit") >= 0) { //  incell > checkbox  
                    // dummy 
                }
            }else{  // toolbar 
                if (dataCommand.indexOf("save") >= 0) {  
                    TR.save(); 
                } else if (dataCommand.indexOf("add") >= 0) { 
			        fnAddRow();
                } else if (dataCommand.indexOf("search") >= 0) { 
                    TR.search(); 
                }
            }

        }

    });

    // treelist change event
    $("#treeMenu").bind("change", function (e) {  
        var grid = $("#treeMenu").data("kendoTreeList");
        var id = $(e.target).attr("id");
        var type = $(e.target).attr("type");
        var fieldNm = $(e.target).attr("name");

        trace("treeMenu : " + fieldNm + "/" + type + " / " + $(e.target).is(":checked") + " / " + KendoUtils.checkType)

        if (type == "checkbox") { // #CHECK_VLUE 와 동기화 
            if (isnull(fieldNm, "") != "") {
                //var uid = $(e.target).closest("tr").attr("data-uid"); 
                //rowIdx = grid.tbody.find("tr[data-uid='" + uid + "']").find(".k-state-selected").prevObject[0].rowIndex;

                var dataItem = grid.dataItem($(e.target).closest("tr"));
                if ($(e.target).is(":checked")) {
                    dataItem.set(fieldNm, KendoUtils.checkType);
                } else {
                    dataItem.set(fieldNm, KendoUtils.uncheckType);
                }
            }
        }else{

        }

    });

    // 행 추가 
	$("#btnAdd").kendoButton({ 
		  icon: "add",
		  click: function(e) { 
			  fnAddRow();
		  }
	});

    function fnAddRow(){
        var treeMenu = $("#treeMenu").data("kendoTreeList");
		var rowIndex = KendoUtils.getSelectRowIndex("treeMenu");  // 현재 선택행 
		var currentRow = $("#treeMenu tbody>tr:eq(" + rowIndex + ")");
		// var nextRow = $("#treeMenu tbody>tr:eq(" + rowIndex+1 + ")");
		var newRowIndex = -1;
 
	    if(rowIndex < 0){ 
			alert("행을 선택하십시오.");
			return;
	    }else{
            var key = treeMenu.dataSource._view[rowIndex].MENU_CD_KEY; 
            if(isnull(key, "") == ""){
				alert("현재 행을 저장한 후 추가하십시오.");  // 저장하지 않고 하위에 행 추가시 lock 걸림.
				return;
            }
        }

		treeMenu.addRow(currentRow); // 신규행 추가 

		for(var i=0;i<treeMenu.dataSource.view().length;i++){ // 추가된 행 index 
            var dataItem = treeMenu.dataSource.view()[i];
			if(KendoUtils.isNew(dataItem) && dataItem._ROW_TYPE != "I"){  // 신규행 여부 : 여러행 추가시 I 는 이미 행추가된 상태이므로 제외 
				newRowIndex = i; 
			}
		}

        trace("newRowIndex : " + newRowIndex);

		//treeMenu.dataSource.view().at(newRowIndex).set("SYS_ID" , "SYS10"); 
		treeMenu.dataSource.view().at(newRowIndex).set("USR_CLS" , "B"); 
		treeMenu.dataSource.view().at(newRowIndex).set("USE_YN" , "Y"); 
		treeMenu.dataSource.view().at(newRowIndex).set("DISPLAY_YN" , "Y"); 
		treeMenu.dataSource.view().at(newRowIndex).set("_ROW_TYPE" , "I"); 

		// check box 처리 
		var element1 = $("#treeMenu .k-grid-edit-row").find("td[data-container-for='USE_YN'] input");
		var element2 = $("#treeMenu .k-grid-edit-row").find("td[data-container-for='DISPLAY_YN'] input");

		element1.attr("checked", true);
		element2.attr("checked", true);

        fnSetRow(newRowIndex);
    }; 

    // 삭제할 행 수집 ( tree 하위 포함)
    var delHasChildren = false; 
    function fnGetDelRows(thatTR) {
        var treeMenu = $("#treeMenu").data("kendoTreeList");
        var uid = $(thatTR).attr("data-uid");
        var rowIndex = KendoUtils.getRowIndexByUID("treeMenu", uid); 
        var data = []; 
        var removeCnt = 0; 
        var lastIndex = -1;
        var msg = "삭제"; 
        delHasChildren = false; 

        for(var i = rowIndex; i < treeMenu.dataSource.view().length; i++ ){
            var hasChildren = treeMenu.dataSource.view()[i].hasChildren;
            var rowType = treeMenu.dataSource.view()[i]._ROW_TYPE;

            if(rowType == "I") removeCnt++; 
            lastIndex = i;

            if(hasChildren == true){
                data.push(treeMenu.dataSource.view()[i]);
                delHasChildren = true; 
            }else{
                data.push(treeMenu.dataSource.view()[i]);
                break; 
            }
        }

        if(removeCnt == data.length){  // I 행만 있을 경우 역순으로 제거 
            for(var i = lastIndex; i >= rowIndex; i-- ){
                trace("removeCnt : " +  i); 
                var dataSource = treeMenu.dataSource;
                var delData = treeMenu.dataSource.view()[i]; 
                dataSource.remove(delData);
                dataSource.sync();
            }
            return []; 
        }

        // 삭제데이터 && I 행 
        if(data.length > 0){
            if(delHasChildren){
                msg += "[하위 메뉴 포함]"; 
            }
        }else{
            alert("삭제할 데이터가 없습니다.");
            return; 
        }

        if(!confirm(msg + " 하시겠습니까?")) return [] ;

        // 삭제 데이터에 포함된 I 행을 제거하고 trnsaction 호출 
        var finalData = [];
        for(var i = data.length - 1; i >= 0; i-- ){
             var rowType = data[i]._ROW_TYPE;
             //trace("rowType: " +  rowType); 
             if(rowType != "I"){
                finalData.push(data[i]);  // transaction param data 에서 제외하고, 삭제 후 재조회로 제거하겠다. 
             }
        }
        //trace("data.length2: " +  finalData.length); 
        return finalData; 
    }

    // 전처리 .. 
	function fnPreProcess(svid){
        var changedData = [];

        var treeMenu = $("#treeMenu").data("kendoTreeList");
        treeMenu.table.focus();  // important !!!  현재 편집중인 셀 닫으면서 dirty tag 생성 
 
		if(svid=="SAVE"){ 
			var grid = $("#treeMenu").data("kendoTreeList"); 
	 		var length = grid.dataSource.view().length ;

             // 변경여부 
             var isChange = grid.dataSource.hasChanges();
             if(!isChange){
                 alert("변경된 데이터가 없습니다.");
                 return [];
             }
	 		
			for(var i=0;i<length;i++){
				var upMenuCd = isnull(grid.dataSource.view()[i].get("UP_MENU_CD"),"");
				var menuCd = isnull(grid.dataSource.view()[i].get("MENU_CD"),"");
				var dirty = grid.dataSource.view()[i].dirty;
				var rowType = grid.dataSource.view()[i]._ROW_TYPE;

				if(dirty){
					var digit = 0; 
					if(upMenuCd.length==1) digit = 3;
					if(upMenuCd.length==3) digit = 6;
					if(upMenuCd.length==6) digit = 9;
					if(upMenuCd.length==9) digit = 12;
					
 					if(menuCd.length != digit){
 						alert("현재 메뉴의 메뉴코드는 " + digit + " 자리로 입력하십시오.");
 						return []; 
 					}  
 					
 					if(menuCd.length > 9 ){
 						alert("메뉴는 3레벨까지 등록가능합니다.");
 						return []; 
 					} 
				}

                if(dirty || rowType == "I"){
                    var roleCd = String(grid.dataSource.view()[i].ROLE_CD);  // 문자로 변경해서 넘긴다. ["A","B"]  --> "A,B"
                    grid.dataSource._view[i].ROLE_CD = roleCd;
                    changedData.push(grid.dataSource.view()[i]); 
                }
			}
		}
		
		return changedData; 
	}

    /*************************************************************************/
	// splitter 설정 
	/*************************************************************************/
	$("#splitter1").kendoSplitter({ //splitter 설정 
		orientation: "horizontal",
		height: "850px",
		panes: [
                { resizable : true, collapsible: false, size: "100%" },
                { resizable : false, collapsible: false }
            ],
	});

	/*************************************************************************/
	// layout resizing..
	/*************************************************************************/
    $(window).resize(function(){
        fnResize();
    });

	function fnResize(){ 
		KendoUtils.resizeOneGrid("splitter1", "formCond"); 
	}

</script>